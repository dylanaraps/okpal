#!/bin/sh

die() {
    printf '%s\n' "$@" >&6
    exit 1
}

read_palette() {
    # Where does the desired palette reside?
    dir=palettes/$mode/$1

    [ -f "/etc/okpal/$dir" ] && palette=/etc/okpal/$dir
    [ -f "$cac/$dir" ]       && palette=$cac/$dir
    [ -f "$dir" ]            && palette=$dir
    [ -f "$1" ]              && palette=$1
    [ -f "$palette" ]        || die "No palette found"

    # Each line in the palette file is a valid shell
    # variable. This simply exports all of them into
    # the script's environment.
    while read -r line; do i=$((i + 1))
        export "${line?Invalid palette file}" || die
    done < "$palette"

    # Ensure that we have only the fields we need.
    [ "$i" -eq 19 ] || die "Missing fields in palette file"

    # Store the name of the current palette.
    printf '%s\n' "$palette" > "$cac/current"
}

make_sequences() {
    # Convert the list of colors into a series of
    # escape sequences which will then be applied
    # to each terminal.
    seq_add() { seqs="$seqs]$1;#$2\\"; }

    # The regular 16 colors.
    seq_add "4;0"  "${color00:=ffffff}"
    seq_add "4;1"  "${color01:=ffffff}"
    seq_add "4;2"  "${color02:=ffffff}"
    seq_add "4;3"  "${color03:=ffffff}"
    seq_add "4;4"  "${color04:=ffffff}"
    seq_add "4;5"  "${color05:=ffffff}"
    seq_add "4;6"  "${color06:=ffffff}"
    seq_add "4;7"  "${color07:=ffffff}"
    seq_add "4;8"  "${color08:=555555}"
    seq_add "4;9"  "${color09:=ffffff}"
    seq_add "4;10" "${color10:=ffffff}"
    seq_add "4;11" "${color11:=ffffff}"
    seq_add "4;12" "${color12:=ffffff}"
    seq_add "4;13" "${color13:=ffffff}"
    seq_add "4;14" "${color14:=ffffff}"
    seq_add "4;15" "${color15:=ffffff}"

    # Special colors.
    seq_add 10 "${foreground:=ffffff}"
    seq_add 11 "${background:=000000}"
    seq_add 12     "${cursor:=999999}"

    # Border background color.
    # (VTE doesn't handle unknown sequences very well.
    #  Skip this sequence if running in VTE.)
    [ "$VTE_VERSION" ] || seq_add 708 "$background"

    # Send the sequence list to every terminal device
    # we have write permissions to.
    for tty in /dev/fd/0 /dev/pts/[0-9]* "$cac/sequences"; do
        printf %b "$seqs" > "$tty" 2>/dev/null &
    done
}

print_palette() {
    # Construst a palette of the generated colorscheme
    # so the user can see what it looks like straight away.
    printf 'Using palette: %s/' "${palette%/*}" >&6

    pal_name=${palette##*/}

    # Rainbow text.
    while [ "$pal_name" ]; do
        printf '\033[3%s;1m%s\033[m' \
               "$((${#pal_name} % 5 + 1))" \
               "${pal_name%${pal_name#?}*}" >&6

        pal_name=${pal_name#?}
    done; printf '\n\n' >&6

    # Colors 0-7.
    for i in 0 1 2 3 4 5 6 7; do
        printf '\033[48;5;%sm  \033[m' "$i" >&6
    done; printf '\n' >&6

    # Colors 8-16.
    for i in 8 9 10 11 12 13 14 15; do
        printf '\033[48;5;%sm  \033[m' "$i" >&6
    done; printf '\n\n' >&6
}

list_palette() {
    # Print all palettes found in all config locations.
    # This also filters out duplicates at the same time.
    for pal in "palettes/$mode/"* \
               "$cac/palettes/$mode/"* \
               "/etc/okpal/palettes/$mode/"*
    do
        # Skip this one, we've seen it already.
        case $seen in *" ${pal##*/} "*) continue; esac

        [ -f "$pal" ] && {
            seen=" $seen ${pal##*/} "
            printf '%s\n' "${pal##*/}"
        }
    done >&6

    exit 0
}

rand_palette() {
    # Grab a random palette from all applicable paths in
    # the user's system. We have no access to $RANDOM sadly.
    set -- "palettes/$mode/"* \
           "$cac/palettes/$mode/"* \
           "/etc/okpal/palettes/$mode/"*

    # Shift the list a random amount leaving us with '$1'
    # containing the random result.
    shift "$(($(
        tr -dc 1-9 < /dev/urandom |
        dd ibs=1 obs=1 count=3 2>/dev/null
    ) % $#))"

    # If the result doesn't exist, cycle through the list
    # until we find one which does.
    while [ ! -f "$1" ] && [ "$1" ]; do
        shift
    done

    j=$((j + 1))

    # Keep going until we find a random result but stop
    # if we've done so 3 times already..
    [ "$j" -gt 3 ] && die "Palette not found"
    [ "$j" -gt 3 ] || [ -f "$1" ] || rand_palette

    palette=$1
}

args() {
    # Parse the options "inline" instead of via a function
    # so that we can mofigy the script's global argument list.
    mode=dark

    while getopts hlLrs:v opt; do case $opt in
        l) list=1 ;;
        L) mode=light ;;
        r) rand=1 ;;
        s) palette=$OPTARG ;;
        v) die "0.0.1" ;;

        *)
            die "usage: ${0##*/} [-s palette|-L|-r] [-l|-v]" \
                "-s palette  Select a palette" \
                "-l          List all palettes" \
                "-r          Select a random palette" \
                "-L          Set light themes (modifier for -s/-r)" \
                "-h          Show this information" \
                "-v          Show version information"
        ;;
    esac; done

    [ "$1" ]       || args -h
    [ "$list" ]    && list_palette
    [ "$rand" ]    && rand_palette
    [ "$palette" ] || args -h

    [ "$palette" ] && [ -z "$list" ] && {
        read_palette "$palette"
        make_sequences
        print_palette
    }
}

main() {
    # Speed things up by disabling the use of unicode
    # and sticking to the C locale..
    export LC_ALL=C

    # Hide stdout/stderr by default to allow for selective
    # and controlled printing to the two.
    exec 6>&1 >/dev/null

    # Create the cache directory which will store the
    # palettes and other needed data.
    mkdir -p "${cac:=${XDG_CONFIG_HOME:=$HOME/.config}/${0##*/}}/palettes"

    args "$@"
}

main "$@"
